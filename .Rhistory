qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
count
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom = "density")
qplot(price,data=diamonds,geom = "density", color=cut)
play()
qplot(price,data=diamonds,binwidth=18497/30,color=cut)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density",fill=cut)
qplot(price,data=diamonds,geom="density",color=cut)
nxt()
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, shaple=cut)
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, shape=cut, color=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut, geom_smooth="lm")
qplot(carat,price,data=diamonds, color=cut, geom_smooth(method="lm")
)
qplot(carat,price,data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+gem_point(alpha=1/3)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0,1,len=4),na.rm = TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
View(diamonds)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
cutpoints
cutpoints[1]
cutpoints[1]*0.999
diamonds$car2<-cut(diamonds$carat,cutpoints)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
cutpoints
cutpoints[1]*0.5
diamonds$car2<-cut(diamonds$carat,cutpoints)
View(diamonds)
cutpoints
cutpoints[1]<-cutpoints[1]*0.99
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
qplot(depth,price,data=diamonds,facets = cut~car2,smooth(method="lm"))
qplot(depth,price,data=diamonds,facets = cut~car2,geom = "smooth")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
qplot(depth,price,data=diamonds,facets = cut~car2,geom = c("smooth","points")
)
qplot(depth,price,data=diamonds,facets = cut~car2,geom = c("smooth","point"))
qplot(depth,price,data=diamonds,facets = cut~car2,geom = c("smooth","point"),"lm")
qplot(depth,price,data=diamonds,facets = cut~car2,geom = c("smooth","point"),method="lm")
qplot(depth,price,data=diamonds,facets = cut~car2,geom = c("smooth","points"))
library(swirl)
swirl()
View(dataFrame)
dist(dataFrame)
View(dataMatrix)
hc<-hclust(distxy)
plot(hc)
View(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
abline(h=0.05,col="red")
abline(h=0.05)
abline(h=.05)
2
12
abline(h=0.05,col="green")
View(dFsm)
dist(dFsm)
hc
View(dataMatrix)
heatmap(dataMatrix,col=cm.colors(25))
View(mt)
heatmap(mt)
mt
plot(denmt)
View(denmt)
distmt
0
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
midst
mdist
mdist(x,y,cx,cy)
apply(distTmp,2, which.min)
points(x,y,pch=19,cex=2,cols1[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
tabbly(x, newClust2,mean)
tapply(x, newClust2,mean)
tapply(y, newClust2,mean)
points(finalCx,finalCy, col=cols1, pch=9 ,cex=2, lwd=2)
play()
mdist(x,y,finalCx,finalCy)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
newClust3<-apply(mdist(x,y,finalCx,finalCy), 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust3])
nxt()
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(kmObj$centers, col=c("black","reed","green"),pch=3, cex=3, lwd=3)
plot(kmObj$centers, col=c("black","red","green"),pch=3, cex=3, lwd=3)
points(kmObj$centers, col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
play()
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rbinom(1,size=1,prob=0.5)
rep(c(0,3),each=5)
rep(c(0,3),each=5)
rep(c(0,3),each=5)
rep(c(0,3),each=5)
rep(c(0,3),each=5)
nxt()
source("addPatt.R",TRUE)
heatmap(dataMatrix)
mat
svd(mat)
diag
matu%*%diag%*%t(matv)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd1$u[1,]*svd1$d[1])%*%t(svd1v[,1])
a1<-(svd1$u[1,]*svd1$d[1])%*%t(svd1$v[,1])
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage
myImage(a1)
a1<-(svd1$u[,1:2]*svd1$d[1:2])%*%t(svd1$v[,1:2])
a1<-(svd1$u[,1:2]*svd1$%*%diag(d[1:2]))%*%t(svd1$v[,1:2])
a2<-(svd1$u[,1:2]*svd1$%*%diag(d[1:2]))%*%t(svd1$v[,1:2])
a2<-(svd1$u[,1:2]%*%diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a3<-svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dim(ssd)
names(ssd)
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ss$subject))
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject==1)
sub1
View(ssd)
dim(sub1)
play()
table(ssd$subject)
nxt()
names(sub1(,1:12))
names(sub1[],1:12])
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(x[,1:3])
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
play()
scale(matrix(c(1,2,3,4),col=2,row=2))
scale(matrix(c(1,2,3,4),2,2)
)
nxt()
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563),centers=6)
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<-which(kkClust$size==29)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12, pch=19, ylab="Laying Cluster"])
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster"])
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19, ylab="Walkdown Cluster")
sub1$activity
sub1$subject
ssd$activity
ssd$subject
mdist
dim(sub1)
names(sub1)
library(swirl)
swirl()
dim(pm0)
head(pm0)
now
names(pw0)
names(pm0)
cnames
cnames<-strsplit(cnames, '|', fixed = TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
headd(pw0)
head(pw0)
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1)
)
nagative<-x1(x1<0)
nagative<-x1[x1<0]
nagative
nagative<-x1<0
nagative<-x1[x1<0]
negative<-x1<0
sum(nagative, na.rm = TRUE)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both<-intersect(site0, site1)
both
head(pm0)
cnt0<-subset(pm0, State.Code==36acounty.site%in%both )
cnt0<-subset(pm0, State.Code==36$county.site%in%both )
cnt0<-subset(pm0, State.Code==36&county.site%in%both )
cnt1<-subset(pm1, State.Code==36&county.site%in%both )
sapply(split, function)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0, County.Code==63&Site.ID==2008)
pm1sub<-subset(cnt1, County.Code==63&Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrom=c(1,2), mar=c(4,4,2,1))
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(h=median(x0sub, na.rm=TRUE))
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
range(x0sub, x1sub, na.rm = TRUE)
rng<-range(x0sub, x1sub, na.rm = TRUE)
rng
mn0<with(pm0,tapply(Sample.Value, State.Code,  mean, na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value, State.Code,  mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value, State.Code,  mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0), mean=mn0)
d1<-data.frame(state=names(mn1), mean=mn1)
View(d1)
names(mn1)
mrg<-merge(d0,d1,by="state")
View(mrg)
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2], xlim = c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x<mrg$mean.y]
mrg[mrg$mean.x<mrg$mean.y,]
#Make a histogram of the total number of steps taken each day
hist(filledTotalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
source('~/data_study/ReproducibleResearch/courseAssignment1/anaylisis.R', echo=TRUE)
setwd("data_study/ReproducibleResearch/courseAssignment1/")
##Loading and preprocessing the data
#Load the data
activity <- read.csv("activity.csv")
library(dplyr)
#Calculate the total number of steps taken per day
totalSteps_day<- summarise(group_by(activity, date), total_steps = sum(steps))
#Make a histogram of the total number of steps taken each day
hist(totalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="totalStepsPerDay.png", width=480, height=480)
dev.off()
#Mean and median of the total number of steps taken per day
meanSteps_day<-mean(totalSteps_day$total_steps, na.rm = TRUE)
medianSteps_day<-median(totalSteps_day$total_steps, na.rm = TRUE)
aveSteps_interval<-summarise(group_by(activity, interval), aveSteps = mean(steps, na.rm = TRUE))
plot(aveSteps_interval$interval, aveSteps_interval$aveSteps,
type = "l",
main="Daily averaged number of steps taken",
xlab="5-minute interval",
ylab="Steps number")
dev.copy(png, file="dailyAveragedNumberOfSteps.png", width=480, height=480)
dev.off()
#5-minute interval containing the maximum number of steps on averaged number of step
maxInterval<-which.max(aveSteps_interval$aveSteps)
# total number of missing values
numMissingVal<-sum(is.na(activity$steps))
activity_filled<- activity
interval<-activity_filled$interval[is.na(activity$steps)]
activity_filled$steps[is.na(activity$steps)]<-aveSteps_interval$aveSteps[match(interval,aveSteps_interval$interval)]
#Calculate the total number of steps taken per day
filledTotalSteps_day<- summarise(group_by(activity_filled, date), total_steps = sum(steps))
#Make a histogram of the total number of steps taken each day
hist(filledTotalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="FilledTotalStepsPerDay.png", width=480, height=480)
dev.off()
#Mean and median of the total number of steps taken per day
filledMeanSteps_day<-mean(filledTotalSteps_day$total_steps)
filledMedianSteps_day<-median(filledTotalSteps_day$total_steps)
day<-weekdays(activity_filled$date)
day[weekdays(activity_filled$date)%in%c("Saturday", "Sunday")]<-"weekend"
day[!(weekdays(activity_filled$date)%in%c("Saturday", "Sunday"))]<-"weekday"
day<-factor(day, levels = c("weekend", "weekday"))
activity_filled<-cbind(activity_filled,day)
aveSteps_interval_Day<-summarise(group_by(activity_filled, interval,day), aveSteps = mean(steps, na.rm = TRUE))
library(lattice)
xyplot(aveSteps ~ interval| day, data =aveSteps_interval_Day,
layout = c(1,2), type="l",
xlab="interval",ylab="Number of steps")
day<-weekdays(activity_filled$date)
day
weekdays(activity_filled$date)
activity_filled$date
class(activity_filled$date)
class(activity$date)
activity$date<-as.Date(activity$date, format ="%Y-%m-%d")
class(activity$date)
activity <- read.csv("activity.csv")
#Process/transform the data
activity$date<-as.Date(activity$date, format ="%Y-%m-%d")
library(dplyr)
##What is mean total number of steps taken per day?
#Calculate the total number of steps taken per day
totalSteps_day<- summarise(group_by(activity, date), total_steps = sum(steps))
#Make a histogram of the total number of steps taken each day
hist(totalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="totalStepsPerDay.png", width=480, height=480)
dev.off()
#Mean and median of the total number of steps taken per day
meanSteps_day<-mean(totalSteps_day$total_steps, na.rm = TRUE)
medianSteps_day<-median(totalSteps_day$total_steps, na.rm = TRUE)
##What is the average daily activity pattern?
#time series plot of the 5-minute interval the average number
#of steps taken, averaged across all days
aveSteps_interval<-summarise(group_by(activity, interval), aveSteps = mean(steps, na.rm = TRUE))
plot(aveSteps_interval$interval, aveSteps_interval$aveSteps,
type = "l",
main="Daily averaged number of steps taken",
xlab="5-minute interval",
ylab="Steps number")
dev.copy(png, file="dailyAveragedNumberOfSteps.png", width=480, height=480)
dev.off()
#5-minute interval containing the maximum number of steps on averaged number of step
maxInterval<-which.max(aveSteps_interval$aveSteps)
##Imputing missing values
# total number of missing values
numMissingVal<-sum(is.na(activity$steps))
activity_filled<- activity
interval<-activity_filled$interval[is.na(activity$steps)]
activity_filled$steps[is.na(activity$steps)]<-aveSteps_interval$aveSteps[match(interval,aveSteps_interval$interval)]
#Calculate the total number of steps taken per day
filledTotalSteps_day<- summarise(group_by(activity_filled, date), total_steps = sum(steps))
#Make a histogram of the total number of steps taken each day
hist(filledTotalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="FilledTotalStepsPerDay.png", width=480, height=480)
dev.off()
#Mean and median of the total number of steps taken per day
filledMeanSteps_day<-mean(filledTotalSteps_day$total_steps)
filledMedianSteps_day<-median(filledTotalSteps_day$total_steps)
day<-weekdays(activity_filled$date)
day[weekdays(activity_filled$date)%in%c("Saturday", "Sunday")]<-"weekend"
day[!(weekdays(activity_filled$date)%in%c("Saturday", "Sunday"))]<-"weekday"
day<-factor(day, levels = c("weekend", "weekday"))
activity_filled<-cbind(activity_filled,day)
aveSteps_interval_Day<-summarise(group_by(activity_filled, interval,day), aveSteps = mean(steps, na.rm = TRUE))
library(lattice)
xyplot(aveSteps ~ interval| day, data =aveSteps_interval_Day,
layout = c(1,2), type="l",
xlab="interval",ylab="Number of steps")
dev.copy(png, file="dailyAveragedNumberOfSteps_weekdays.png", width=480, height=480)
dev.off()
round(0.3)
round(0.6)
integer(0.6)
integer(1.6)
activity <- read.csv("activity.csv")
#Process/transform the data
activity$date<-as.Date(activity$date, format ="%Y-%m-%d")
library(dplyr)
##What is mean total number of steps taken per day?
#Calculate the total number of steps taken per day
totalSteps_day<- summarise(group_by(activity, date), total_steps = sum(steps))
#Make a histogram of the total number of steps taken each day
hist(totalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="totalStepsPerDay.png", width=480, height=480)
dev.off()
#Mean and median of the total number of steps taken per day
meanSteps_day<-mean(totalSteps_day$total_steps, na.rm = TRUE)
medianSteps_day<-median(totalSteps_day$total_steps, na.rm = TRUE)
aveSteps_interval<-summarise(group_by(activity, interval), aveSteps = mean(steps, na.rm = TRUE))
plot(aveSteps_interval$interval, aveSteps_interval$aveSteps,
type = "l",
main="Daily averaged number of steps taken",
xlab="5-minute interval",
ylab="Steps number")
dev.copy(png, file="dailyAveragedNumberOfSteps.png", width=480, height=480)
dev.off()
maxInterval<-which.max(aveSteps_interval$aveSteps)
numMissingVal<-sum(is.na(activity$steps))
activity_filled<- activity
interval<-activity_filled$interval[is.na(activity$steps)]
activity_filled$steps[is.na(activity$steps)]<-round(aveSteps_interval$aveSteps[match(interval,aveSteps_interval$interval)])
filledTotalSteps_day<- summarise(group_by(activity_filled, date), total_steps = sum(steps))
hist(filledTotalSteps_day$total_steps,
main="Total steps taken each day",
xlab = "Total steps",
ylim = c(0,35))
dev.copy(png, file="FilledTotalStepsPerDay.png", width=480, height=480)
dev.off()
filledMeanSteps_day<-mean(filledTotalSteps_day$total_steps)
filledMedianSteps_day<-median(filledTotalSteps_day$total_steps)
day<-weekdays(activity_filled$date)
day[weekdays(activity_filled$date)%in%c("Saturday", "Sunday")]<-"weekend"
day[!(weekdays(activity_filled$date)%in%c("Saturday", "Sunday"))]<-"weekday"
day<-factor(day, levels = c("weekend", "weekday"))
activity_filled<-cbind(activity_filled,day)
aveSteps_interval_Day<-summarise(group_by(activity_filled, interval,day), aveSteps = mean(steps, na.rm = TRUE))
library(lattice)
xyplot(aveSteps ~ interval| day, data =aveSteps_interval_Day,
layout = c(1,2), type="l",
xlab="interval",ylab="Number of steps")
dev.copy(png, file="dailyAveragedNumberOfSteps_weekdays.png", width=480, height=480)
dev.off()
